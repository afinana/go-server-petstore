/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/redis/go-redis/v9"
	"github.com/streadway/amqp"
	api "middleland.net/swaggerapi/petstore"
)

func main() {

	// Define command-line flags
	serverAddr := flag.String("serverAddr", "localhost", "HTTP server network address")
	serverPort := flag.Int("serverPort", 8090, "HTTP server network port")
	redisURI := flag.String("redisURI", "redis://:@localhost:6379/", "Database hostname url")
	mqURI := flag.String("mqURI", "amqp://admin:admin@localhost:5672/", "Message queue hostname url")

	flag.Parse()

	// Create logger for writing information and error messages.
	infoLog := log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime)
	errLog := log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile)

	// Establish database connection
	opt, err := redis.ParseURL(*redisURI)
	if err != nil {
		errLog.Fatal(err)
	}
	client := redis.NewClient(opt)

	infoLog.Printf("Database connection established")

	// establish connection to the message queue
	conn, err := amqp.Dial(*mqURI)
	if err != nil {
		errLog.Fatal(err)
	}
	defer conn.Close()

	infoLog.Printf("Message broker connection established")
	app := api.NewApp(
		infoLog,
		errLog,
		&api.PetModel{
			C: client,
			// create a new channel
			Q: conn,
		},
		&api.OrderModel{
			C: client,
			Q: conn,
		},
		&api.UserModel{
			C: client,
			Q: conn,
		},
	)

	// Initialize a new http.Server struct.
	serverURI := fmt.Sprintf("%s:%d", *serverAddr, *serverPort)
	srv := &http.Server{
		Addr:         serverURI,
		ErrorLog:     errLog,
		Handler:      app.NewRouter(),
		IdleTimeout:  time.Minute,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	infoLog.Printf("Starting server on %s", serverURI)
	err = srv.ListenAndServe()
	errLog.Fatal(err)
}
