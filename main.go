/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/redis/go-redis/v9"
	api "middleland.net/swaggerapi/petstore"
)

func main() {

	// Define command-line flags
	serverAddr := flag.String("serverAddr", "localhost", "HTTP server network address")
	serverPort := flag.Int("serverPort", 8090, "HTTP server network port")
	redisURI := flag.String("redisURI", "redis://:@localhost:6379/", "Database hostname url")
	flag.Parse()

	// Create logger for writing information and error messages.
	infoLog := log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime)
	errLog := log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile)

	// Establish database connection
	opt, err := redis.ParseURL(*redisURI)
	if err != nil {
		errLog.Fatal(err)
	}
	client := redis.NewClient(opt)
	defer client.Close()

	infoLog.Printf("Database connection established")
	app := api.NewLog(
		infoLog,
		errLog,
		&api.PetModel{
			C: client,
		},
		&api.OrderModel{
			C: client,
		},
		&api.UserModel{
			C: client,
		},
	)

	// Initialize a new http.Server struct.
	serverURI := fmt.Sprintf("%s:%d", *serverAddr, *serverPort)
	srv := &http.Server{
		Addr:         serverURI,
		ErrorLog:     errLog,
		Handler:      app.NewRouter(),
		IdleTimeout:  time.Minute,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	// Start the server
	infoLog.Printf("Starting server on %s", serverURI)
	go func() {
		err := srv.ListenAndServe()
		if err != nil {
			errLog.Fatalf("Server failed to start: %v", err)
		}
	}()

	// Graceful shutdown
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt)
	<-stop

	infoLog.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		errLog.Fatalf("Server forced to shutdown: %v", err)
	}

	infoLog.Println("Server exiting")
}
