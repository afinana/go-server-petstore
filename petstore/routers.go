/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func (app *Application) NewRouter() *mux.Router {

	router := mux.NewRouter().StrictSlash(true)
	routes := Routes{
		Route{
			"Index",
			"GET",
			"/v2/",
			app.Index,
		},

		Route{
			"AddPet",
			strings.ToUpper("Post"),
			"/v2/pet",
			app.AddPet,
		},

		Route{
			"DeletePet",
			strings.ToUpper("Delete"),
			"/v2/pet/{petId}",
			app.DeletePet,
		},

		Route{
			"FindPetsByStatus",
			strings.ToUpper("Get"),
			"/v2/pet/findByStatus",
			app.FindPetsByStatus,
		},

		Route{
			"FindPetsByTags",
			strings.ToUpper("Get"),
			"/v2/pet/findByTags",
			app.FindPetsByTags,
		},

		Route{
			"GetPetById",
			strings.ToUpper("Get"),
			"/v2/pet/{petId}",
			app.GetPetById,
		},

		Route{
			"UpdatePet",
			strings.ToUpper("Put"),
			"/v2/pet",
			app.UpdatePet,
		},

		Route{
			"UpdatePetWithForm",
			strings.ToUpper("Post"),
			"/v2/pet/{petId}",
			app.UpdatePetWithForm,
		},

		Route{
			"UploadFile",
			strings.ToUpper("Post"),
			"/v2/pet/{petId}/uploadImage",
			app.UploadFile,
		},

		Route{
			"DeleteOrder",
			strings.ToUpper("Delete"),
			"/v2/store/order/{orderId}",
			app.DeleteOrder,
		},

		Route{
			"GetInventory",
			strings.ToUpper("Get"),
			"/v2/store/inventory",
			app.GetInventory,
		},

		Route{
			"GetOrderById",
			strings.ToUpper("Get"),
			"/v2/store/order/{orderId}",
			app.GetOrderById,
		},

		Route{
			"PlaceOrder",
			strings.ToUpper("Post"),
			"/v2/store/order",
			app.PlaceOrder,
		},

		Route{
			"CreateUser",
			strings.ToUpper("Post"),
			"/v2/user",
			app.CreateUser,
		},

		Route{
			"CreateUsersWithArrayInput",
			strings.ToUpper("Post"),
			"/v2/user/createWithArray",
			app.CreateUsersWithArrayInput,
		},

		Route{
			"CreateUsersWithListInput",
			strings.ToUpper("Post"),
			"/v2/user/createWithList",
			app.CreateUsersWithListInput,
		},
		Route{
			"GetAllUsers",
			strings.ToUpper("Get"),
			"/v2/user",
			app.GetAllUsers,
		},
		Route{
			"LoginUser",             // Corrected the route name
			strings.ToUpper("Post"), // Changed method to Post
			"/v2/user/login",
			app.LoginUser,
		},

		Route{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/v2/user/{username}",
			app.DeleteUser,
		},

		Route{
			"GetUserByName",
			strings.ToUpper("Get"),
			"/v2/user/{username}",
			app.GetUserByName,
		},

		Route{
			"LogoutUser",
			strings.ToUpper("Get"),
			"/v2/user/logout",
			app.LogoutUser,
		},

		Route{
			"UpdateUser",
			strings.ToUpper("Put"),
			"/v2/user/{username}",
			app.UpdateUser,
		},
		// Added missing routes for user operations
		Route{
			"UpdateUser",
			strings.ToUpper("Put"),
			"/v2/user/{userId}",
			app.UpdateUser,
		},

		Route{
			"GetAllUsers",
			strings.ToUpper("Get"),
			"/v2/users",
			app.GetAllUsers,
		},
	}

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method, "OPTIONS").
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)

	}
	// Add metrics route
	router.Handle("/metrics", MetricsHandler()).Methods("GET")

	return router

}

func (app *Application) Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Welcome to the homepage!")
}
