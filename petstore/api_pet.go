/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"reflect"
	"strconv"

	"github.com/gorilla/mux"
)

/*
Pet:{
   Id int64 `json:"id,omitempty"`

	Category *Category `json:"category,omitempty"`

	Name string `json:"name"`

	PhotoUrls []string `json:"photoUrls"`

	Tags []Tag `json:"tags,omitempty"`

	// pet status in the store
	Status string `json:"status,omitempty"`
}

Category {
	Id int64 `json:"id,omitempty"`

	Name string `json:"name,omitempty"`
}
Tag
{
	Id int64 `json:"id,omitempty"`

	Name string `json:"name,omitempty"`
}

*/
var Pets []Pet = []Pet{
	{Id: 1, Category: &Category{Id: 1, Name: "category01"}, Name: "dog", PhotoUrls: []string{},
		Tags: []Tag{{Id: 1, Name: " tag01"}}, Status: "fine"},
	{Id: 2, Category: &Category{Id: 2, Name: "category02"}, Name: "cat", PhotoUrls: []string{},
		Tags: []Tag{{Id: 2, Name: "tag02"}}, Status: "fine"},
}

func AddPet(w http.ResponseWriter, r *http.Request) {

	// get the body of our POST request
	// unmarshal this into a new Article struct
	// append this to our Articles array.
	reqBody, _ := ioutil.ReadAll(r.Body)
	var pet Pet
	json.Unmarshal(reqBody, &pet)
	// update our global Pets array to include
	// our new Pet
	Pets = append(Pets, pet)

	json.NewEncoder(w).Encode(pet)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func DeletePet(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)

	id, err := strconv.ParseInt(vars["id"], 10, 32)
	if err != nil {
		panic(err)
	}
	fmt.Printf("Parsed int is %d\n", id)

	for index, pet := range Pets {
		if pet.Id == id {
			Pets = append(Pets[:index], Pets[index+1:]...)
		}
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func FindPetsByStatus(w http.ResponseWriter, r *http.Request) {

	status := r.URL.Query().Get("status")
	var result []Pet
	fmt.Println("Endpoint Hit: FindPetsByStatus %\n ", status)
	for index, pet := range Pets {
		if pet.Status == status {
			fmt.Printf("Found pet in position: %d\n", index)
			result = append(result, pet)
		}
	}
	json.NewEncoder(w).Encode(result)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func FindPetsByTags(w http.ResponseWriter, r *http.Request) {

	fmt.Println("Endpoint Hit: FindPetsByTags deprecated")
	json.NewEncoder(w).Encode(Pets)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetPetById(w http.ResponseWriter, r *http.Request) {

	var result Pet
	vars := mux.Vars(r)

	id, err := strconv.ParseInt(vars["petId"], 10, 32)
	if err != nil {
		fmt.Printf("Parsed int is %d\n", id)
		panic(err)
	}
	fmt.Printf("Parsed int is %d\n", id)

	for _, pet := range Pets {
		if pet.Id == id {
			result = pet

		}
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if reflect.ValueOf(result).IsZero() {
		w.WriteHeader(http.StatusNotFound)
	} else {
		json.NewEncoder(w).Encode(result)

	}

}

func UpdatePet(w http.ResponseWriter, r *http.Request) {

	// get the body of our POST request
	// unmarshal this into a new Article struct
	// append this to our Articles array.
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		panic(err)
	}
	var pet Pet
	json.Unmarshal(reqBody, &pet)

	for index, pet := range Pets {
		if int(pet.Id) == index {
			Pets[index] = pet
		}
	}

	json.NewEncoder(w).Encode(pet)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UploadFile(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
