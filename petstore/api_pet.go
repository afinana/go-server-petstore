/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"github.com/redis/go-redis/v9"
)

func (app *Application) AddPet(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	var m Pet
	if err := json.NewDecoder(r.Body).Decode(&m); err != nil {
		app.serverError(w, err)
		return
	}

	if _, err := app.pets.Insert(m); err != nil {
		app.serverError(w, err)
		return
	}

	app.infoLog.Printf("New pet created, id= %d", m.ID)
	app.respondWithJSON(w, http.StatusCreated, m)
}

func (app *Application) DeletePet(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	id := mux.Vars(r)["id"]

	if err := app.pets.Delete(id); err != nil {
		app.serverError(w, err)
		return
	}

	app.infoLog.Printf("Deleted pet with id %s", id)
	app.respondWithJSON(w, http.StatusOK, map[string]string{"result": "success"})
}

func (app *Application) FindPetsByStatus(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	statusQuery := r.URL.Query().Get("status")
	app.infoLog.Printf("Endpoint Hit: FindPetsByStatus %s", statusQuery)

	status := strings.Split(statusQuery, ",")
	model, err := app.pets.FindByStatus(status)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.respondWithJSON(w, http.StatusNotFound, model)
			return
		}
		app.serverError(w, err)
		return
	}

	app.respondWithJSON(w, http.StatusOK, model)
}

func (app *Application) FindPetsByTags(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	tagQuery := r.URL.Query().Get("tags")
	app.infoLog.Println("Endpoint Hit: FindPetsByTags", tagQuery)

	tags := strings.Split(tagQuery, ",")
	model, err := app.pets.FindBytags(tags)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.respondWithError(w, http.StatusNotFound, "Pets not found")
			return
		}
		app.serverError(w, err)
		return
	}

	app.respondWithJSON(w, http.StatusOK, model)
}

func (app *Application) GetPetById(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	id := mux.Vars(r)["petId"]
	app.infoLog.Printf("Get pet by id=%s", id)

	model, err := app.pets.FindByID(id)
	if err == redis.Nil {
		app.respondWithError(w, http.StatusNotFound, "Pet not found")
		return
	} else if err != nil {
		app.serverError(w, err)
		return
	}

	app.respondWithJSON(w, http.StatusOK, model)
}

func (app *Application) UpdatePet(w http.ResponseWriter, r *http.Request) {
	// Enable CORS
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	app.enableCors(&w, r)

	var m Pet
	if err := json.NewDecoder(r.Body).Decode(&m); err != nil {
		app.serverError(w, err)
		return
	}

	app.infoLog.Printf("Updating pet with id=%v", m.ID)
	if _, err := app.pets.Update(m); err != nil {
		app.serverError(w, err)
		return
	}

	app.respondWithJSON(w, http.StatusOK, m)
}

func (app *Application) UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {
	app.respondWithJSON(w, http.StatusOK, map[string]string{"result": "success"})
}

func (app *Application) UploadFile(w http.ResponseWriter, r *http.Request) {
	app.respondWithJSON(w, http.StatusOK, map[string]string{"result": "success"})
}

// Helper functions
func (app *Application) respondWithJSON(w http.ResponseWriter, status int, payload interface{}) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(payload)
}

func (app *Application) respondWithError(w http.ResponseWriter, status int, message string) {
	app.respondWithJSON(w, status, map[string]string{"error": message})
}
