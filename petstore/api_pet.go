/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"net/http"
	"reflect"
	"strings"
)

func (app *Application) AddPet(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	// Define Pets model
	var m Pet
	// Get request information
	err := json.NewDecoder(r.Body).Decode(&m)
	if err != nil {
		app.serverError(w, err)
	}

	// Insert new Pets
	insertResult, err := app.pets.Insert(m)
	if err != nil {
		app.serverError(w, err)
	}
	m.ID = insertResult.InsertedID.(primitive.ObjectID)

	app.infoLog.Printf("New pet have been created, id=%s", insertResult.InsertedID)
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	json.NewEncoder(w).Encode(m)

}

func (app *Application) DeletePet(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	// Get id from incoming url
	vars := mux.Vars(r)
	id := vars["id"]

	// Delete Pets by id
	deleteResult, err := app.pets.Delete(id)
	if err != nil {
		app.serverError(w, err)
	}

	app.infoLog.Printf("Have been eliminated %d pet(s)", deleteResult.DeletedCount)
	app.enableCors(&w, r)
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	//w.WriteHeader(http.StatusOK)
}

func (app *Application) FindPetsByStatus(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	status_query := r.URL.Query().Get("status")
	app.infoLog.Printf("Endpoint Hit: FindPetsByStatus %s \n", status_query)

	var model []Pet
	status := strings.Split(status_query, ",")

	// Find Pets by id
	model, err := app.pets.FindByStatus(status)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.infoLog.Println("Pets not found")
			return
		}
		// Any other error will send an internal server error
		app.serverError(w, err)
	}

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	json.NewEncoder(w).Encode(model)
	//w.WriteHeader(http.StatusOK)
}

func (app *Application) FindPetsByTags(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	tag_query := r.URL.Query().Get("tags")
	app.infoLog.Printf("Endpoint Hit: FindPetsByTags %s \n", tag_query)

	var model []Pet
	tags := strings.Split(tag_query, ",")

	// Find Pets by id
	model, err := app.pets.FindBytags(tags)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.infoLog.Println("Pets not found")
			return
		}
		// Any other error will send an internal server error
		app.serverError(w, err)
	}

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	json.NewEncoder(w).Encode(model)
	app.enableCors(&w, r)
	w.WriteHeader(http.StatusOK)
}

func (app *Application) GetPetById(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	// Get id from incoming url
	vars := mux.Vars(r)
	id := vars["petId"]

	app.infoLog.Printf("Get pet by id=%s \n", id)

	// Find Pets by id
	model, err := app.pets.FindByID(id)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.infoLog.Println("Pets not found")
			return
		}
		// Any other error will send an internal server error
		app.serverError(w, err)
	}

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	if reflect.ValueOf(model).IsZero() {
		w.WriteHeader(http.StatusNotFound)
	} else {
		json.NewEncoder(w).Encode(model)
		w.WriteHeader(http.StatusOK)
	}

}

func (app *Application) UpdatePet(w http.ResponseWriter, r *http.Request) {

	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	// Define Pets model
	var m Pet
	// Get request information
	err := json.NewDecoder(r.Body).Decode(&m)
	if err != nil {
		app.serverError(w, err)
	}

	//m.ID = bson.ObjectIdHex(id)

	// Insert new Pets
	insertResult, err := app.pets.Update(m)
	if err != nil {
		app.serverError(w, err)
	}

	app.infoLog.Printf("New pet have been created, id=%s \n", insertResult.InsertedID)

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	json.NewEncoder(w).Encode(m)
	w.WriteHeader(http.StatusOK)
}

func (app *Application) UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	w.WriteHeader(http.StatusOK)
}

func (app *Application) UploadFile(w http.ResponseWriter, r *http.Request) {
	if r.Method == "OPTIONS" {
		app.enableCors(&w, r)
		w.WriteHeader(http.StatusOK)
		return
	}
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	app.enableCors(&w, r)
	w.WriteHeader(http.StatusOK)
}
