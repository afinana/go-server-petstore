/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/redis/go-redis/v9"
)

var Users []User

func (app *Application) CreateUser(w http.ResponseWriter, r *http.Request) {

	// get the body of our POST request
	// unmarshal this into a new Article struct
	// append this to our Articles array.
	var user User

	// Get request information
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		app.serverError(w, err)
		return
	}
	// add user in redis
	_, err = app.users.Insert(user)
	if err != nil {
		app.serverError(w, err)
		return
	}

	app.infoLog.Printf("New user have been created, id= %d", user.Id)

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	json.NewEncoder(w).Encode(user)

}

func (app *Application) CreateUsersWithArrayInput(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func (app *Application) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func (app *Application) DeleteUser(w http.ResponseWriter, r *http.Request) {

	// Get id from incoming url
	vars := mux.Vars(r)
	id := vars["username"]

	// append users to id
	app.infoLog.Printf("DeleteUser:: start, id= %s", id)
	// Find user by Name
	user, err := app.users.FindByName(id)
	if err == redis.Nil {
		w.WriteHeader(http.StatusNotFound)
		return
	}

	// Delete Pets by id
	// generate a new key for the user

	err = app.users.Delete(fmt.Sprintf("%v", user.Id))
	if err != nil {
		app.serverError(w, err)
		return
	}

	app.infoLog.Printf("User have been eliminated %s pet(s)", id)
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

}

func (app *Application) GetUserByName(w http.ResponseWriter, r *http.Request) {
	var user *User
	vars := mux.Vars(r)

	username := vars["username"]
	fmt.Printf("GetUserByName name: %s\n", username)

	// create a new key for the user
	user, err := app.users.FindByName(username)
	if err == redis.Nil {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	if err != nil {
		app.serverError(w, err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	json.NewEncoder(w).Encode(user)
	w.WriteHeader(http.StatusOK)
}

func (app *Application) LoginUser(w http.ResponseWriter, r *http.Request) {

	var user *User
	// read query parameters username and password
	username := r.URL.Query().Get("username")
	password := r.URL.Query().Get("password")

	// add log info username
	app.infoLog.Printf("LoginUser:: start, username= %s", username)

	// find user by name
	user, err := app.users.FindByName(username)
	if err == redis.Nil {
		w.WriteHeader(http.StatusNotFound)
		return
	}
	if err != nil {
		app.serverError(w, err)
		w.WriteHeader(http.StatusNotFound)
		return
	}
	// check password
	if user.Password != password {
		w.WriteHeader(http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	json.NewEncoder(w).Encode(user)
	w.WriteHeader(http.StatusOK)

}

func (app *Application) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func (app *Application) UpdateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// Extra functions of petstore Swagger API
// get all pets function
func (app *Application) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	users, err := app.users.FindAll()
	if err != nil {
		app.serverError(w, err)
		return
	}
	w.Header().Set("Content-Type", "Application/json; charset=UTF-8")
	json.NewEncoder(w).Encode(users)
}
